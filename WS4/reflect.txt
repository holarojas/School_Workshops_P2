/*----------------------------------------------
// Workshop 4
// Reflection
------------------------------------------------
Name:	Martha Rocio Rojas Martinez
Mail:	mrrojas-martinez@myseneca.ca
ID:	112073218
Date:	Oct. 11th, 2022
----------------------------------------------*/

This was a very challenging workshop because I struggled to remember how to create an array of pointers and manage them. I spent a lot of my time debugging my code and trying to follow the pointers of the array and the individual reservations by writing them in my notebook and keep an eye on when they changed and how my code was treating them.
This method of troubleshooting worked for me because I had memory leaks, and by following the pointers lifecycle throughout the code, I could identify where I was missing the delete keyword.

The difference between a composition and aggregation relations is that in a Composition relationship, the lifecycle is managed by the composer object. 


:::::: COMPOSITION :::::::
For instance, in the workshop, the Restaurant class HAS reservations because we are creating the reservations and deleting them with the Restaurant special functions:

Like in the constructor:

Restaurant::Restaurant(const Reservation* reservations[], size_t cnt)
	{
		
		delete[] m_ppReserv;
		//Creating array of pointers of type Reservation of size cnt
		m_ppReserv = new Reservation * [cnt];

		for (auto i = 0u; i < cnt; ++i) {
			m_ppReserv[i] = new Reservation(*reservations[i]); //<--Creating new reservation resource
		}
		m_reservCnt = cnt;

	}

or in the Copy Assignment operator:

Restaurant& Restaurant::operator=(const Restaurant& other)
	{
		//1. CHECK FOR SELF ASSIGNMENT
		if (this != &other) {
			//2. CLEANUP TO GUARANTEE THIS ALWAYS WORKS
			for (auto i = 0u; i < m_reservCnt; ++i) { //<--Responsible for deleting 
				delete m_ppReserv[i];
			}
			delete[] m_ppReserv;

			//3. SHALLOW COPY
			m_reservCnt = other.m_reservCnt;

			//4. DEEP COPY
			if (other.m_ppReserv != nullptr) {
				m_ppReserv = new Reservation * [m_reservCnt];
				for (auto i = 0u; i < m_reservCnt; ++i) {
					m_ppReserv[i] = new Reservation();  //<-- Responsible for creating 
					*m_ppReserv[i] = *other.m_ppReserv[i];
				}
			}
			else {
				m_ppReserv = nullptr;
			}
		}

		return *this;
	}

Destructor:
Restaurant::~Restaurant()
	{
		for (auto i = 0u; i < m_reservCnt; ++i) {
			delete m_ppReserv[i];
		}
		delete[] m_ppReserv;
	}




:::::: AGGREGATION :::::::
And we can say that the relation between ConfirmationSender and Reservations is of Aggregation type.
Because ConfirmationSender USES the reservations but is not responsible for the lifecycle management.

For instance, in the Copy Assignment Operator we are not creating a new Reservation resource, we are only using the same pointer to point to the already existing Reservation:

	//Copy Assignment Operator
	ConfirmationSender& ConfirmationSender::operator=(const ConfirmationSender& other)
	{
		//1. CHECK FOR SELF ASSIGNMENT
		if (this != &other) {
			//2. CLEANUP TO GUARANTEE THIS ALWAYS WORKS
			delete[] m_ppConfReserv;

			//3. SHALLOW COPY
			m_confReservCnt = other.m_confReservCnt;

			//4. DEEP COPY
			if (other.m_ppConfReserv != nullptr) {
				m_ppConfReserv = new const Reservation * [m_confReservCnt];
				for (auto i = 0u; i < m_confReservCnt; ++i) {
					m_ppConfReserv[i] = other.m_ppConfReserv[i];
				}
			}
			else {
				m_ppConfReserv = nullptr;
			}
		}

		return *this;
	}

In the destructor we are not in charge of deleting the resource for Reservations because we are not allocating any Reservations resource with the ConfirmationSender class:

	//Destructor
	ConfirmationSender::~ConfirmationSender()
	{
		delete[] m_ppConfReserv;
	}





::::: COPY AND MOVE FUNCTIONS ::::

In the copy functions for a Composition class we need to take car of the memory, be careful of deleting memory allocation before creating new resources, and make sure we are copying the values and not the pointer itself.

In the copy functions for Aggregation we are not in charge of the memory allocation of the Reservations class, and we can copy the pointer itself.


The move functions for both types of classes are similar since we move the whole pointer from one array to another.
In my case, I wrote the code like this:

	//Move Assignment Operator
	Restaurant& Restaurant::operator=(Restaurant&& other)
	{
		//1. CHECK FOR SELF ASSIGNMENT
		if (this != &other) {
			//2. CLEANUP TO GUARANTEE THIS ALWAYS WORKS
			delete[] m_ppReserv;

			//3. SHALLOW MOVE
			m_reservCnt = other.m_reservCnt;
			other.m_reservCnt = 0;

			//4. DEEP MOVE
			m_ppReserv = other.m_ppReserv;
			other.m_ppReserv = nullptr;
		}
			
		return *this;
	}

	//Move Assignment Operator
	ConfirmationSender& ConfirmationSender::operator=(ConfirmationSender&& other)
	{
		//1. CHECK FOR SELF ASSIGNMENT
		if (this != &other) {
			//2. CLEANUP TO GUARANTEE THIS ALWAYS WORKS
			delete[] m_ppConfReserv;

			//3. SHALLOW MOVE
			m_confReservCnt = other.m_confReservCnt;
			other.m_confReservCnt = 0;

			//4. DEEP MOVE
			m_ppConfReserv = other.m_ppConfReserv;
			other.m_ppConfReserv = nullptr;
		}
		return *this;
	}